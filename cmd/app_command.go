/*
Copyright © 2020 David Arnold <dar@xoe.solutions>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
package cmd

import (
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"github.com/xoe-labs/ddd-gen/pkg/gen_app/command"
)

// appCommandCmd represents the app command
var appCommandCmd = &cobra.Command{
	Use:   "command",
	Short: "Generates idiomatic go code for commands (CQRS) within the application layer",
	Long: `Generates idiomatic go code for commands (CQRS) within the application layer.

  Available Annotations:
    Key "command" | Separator: ";"
      new[,non-identifiable]  - handler that knows how to create a new instance of the aggregate
                                non-identifiable: if no uuid is pre-established in the request -> synchronously returns uuid
      del                     - handler that knows how to delete an instance of the aggregate
      w/o policy              - handler that will not know how to check access against the policy interface
      topic,<topic>           - topic is generated from the last Word, if not desired, it can be mannually overridden
      adapters,key:import/path,key2:import/path2
                              - add additional adapters to the command handler

  Config File: it is recommended to declare the following config file, although values can be passed as cli flags, too:

    # ./ddd-config.yaml
    aggregate:    "github.com/xoe-labs/ddd-gen/internal/test-svc/domain/account.Account"
    identifiable: "github.com/xoe-labs/ddd-gen/internal/test-svc/domain.Identifiable"
    repository:   "github.com/xoe-labs/ddd-gen/internal/test-svc/domain.Repository"
    policeable:   "github.com/xoe-labs/ddd-gen/internal/test-svc/app/policy.Policeable"
    policer:      "github.com/xoe-labs/ddd-gen/internal/test-svc/app/policy.Policer"

  Expected Folder Structure:
    ./app
    ├── app.go                      // define your tags here
    ├── command
    │   ├── make_new_account.go     // stub generated if fiel doesn't exist
    │   └── make_new_account_gen.go // generated by this tool
    ├── policy
    │   └── interface.go            // define your policy interface
    ├── repository
    │   └── interface.go            // define your (single) aggregate's repository interface
    └── ...`,
	Example: `  Command:
    //go:generate go run github.com/xoe-labs/ddd-gen --config ../ddd-config.yaml app command --type Commands

  Code:
    type Commands struct {
      MakeNewAccount          command.MakeNewAccountHandler          ` + "`" + `command:"new"` + "`" + `
      MakeNewAccountWithOutId command.MakeNewAccountWithOutIdHandler ` + "`" + `command:"new,non-identifiable; topic,account"` + "`" + `
      DeleteAccount           command.DeleteAccountHandler           ` + "`" + `command:"del"` + "`" + `
      BlockAccount            command.BlockAccountHandler            ` + "`" + `` + "`" + `
      ValidateHolder          command.BlockAccountHandler            ` + "`" + `command:"w/o policy"` + "`" + `
      IncreaseBalance         command.IncreaseBalanceHandler         ` + "`" + `` + "`" + `
      IncreaseBalanceFromSvc  command.IncreaseBalanceHandler         ` + "`" + `command:"topic,balance; adapters,svc:github.com/xoe-labs/ddd-gen/internal/test-svc/adapter/balancesvc.Balancer"` + "`" + `
    }
`,
	RunE: func(cmd *cobra.Command, args []string) error {
		cfg, err := command.NewConfig(
			viper.GetString("aggregate"),
			viper.GetString("policeable"),
			viper.GetString("identifiable"),
			viper.GetString("repository"),
			viper.GetString("policer"),
		)
		if err != nil {
			return err
		}
		return command.Gen(sourceType, *cfg)
	},
}

func init() {
	appCmd.AddCommand(appCommandCmd)
}
