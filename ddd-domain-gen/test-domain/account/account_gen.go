// Code generated by ddd-domain-gen, DO NOT EDIT.
package account

import (
	"errors"
	holder "github.com/xoe-labs/go-generators/ddd-domain-gen/test-domain/holder"
	"reflect"
)

// Generators ...

// New returns a guaranteed-to-be-valid Account or an error
func New(uuid string, holder holder.Holder, altHolders []holder.Holder, holderRoles map[holder.Holder]string, address string) (*Account, error) {
	if reflect.ValueOf(uuid).IsZero() {
		return nil, errors.New("field uuid is empty")
	}
	if reflect.ValueOf(holder).IsZero() {
		return nil, errors.New("field holder is empty")
	}
	if reflect.ValueOf(altHolders).IsZero() {
		return nil, errors.New("field alternative holders is empty")
	}
	if reflect.ValueOf(holderRoles).IsZero() {
		return nil, errors.New("field holder role map is empty")
	}
	a := &Account{
		address:     address,
		altHolders:  altHolders,
		holder:      holder,
		holderRoles: holderRoles,
		uuid:        uuid,
	}
	return a, nil
}

// MustNew returns a guaranteed-to-be-valid Account or panics
func MustNew(uuid string, holder holder.Holder, altHolders []holder.Holder, holderRoles map[holder.Holder]string, address string) *Account {
	a, err := New(uuid, holder, altHolders, holderRoles, address)
	if err != nil {
		panic(err)
	}
	return a
}

// Marshalers ...

// UnmarshalFromRepository unmarshals Account from the repository so that non-constructable
// private fields can still be initialized from (private) repository state
//
// Important: DO NEVER USE THIS METHOD EXCEPT FROM THE REPOSITORY
// Reason: This method initializes private state, so you could corrupt the domain.
func UnmarshalFromRepository(uuid string, holder holder.Holder, altHolders []holder.Holder, holderRoles map[holder.Holder]string, address string, balance int64, values []int64) *Account {
	a := MustNew(uuid, holder, altHolders, holderRoles, address)
	a.balance = balance
	a.values = values
	return a
}
