// Code generated by ddd-domain-gen, DO NOT EDIT.
package holder

import (
	"errors"
	"reflect"
	"time"
)

// Generators ...

// New returns a guaranteed-to-be-valid Holder or an error
func New(uuid string, name string, bday time.Time, hTyp HolderType) (*Holder, error) {
	if reflect.ValueOf(uuid).IsZero() {
		return nil, errors.New("field uuid is empty")
	}
	if reflect.ValueOf(name).IsZero() {
		return nil, errors.New("field name is empty")
	}
	if reflect.ValueOf(hTyp).IsZero() {
		return nil, errors.New("filed folder type is empty")
	}
	h := &Holder{
		bday: bday,
		hTyp: hTyp,
		name: name,
		uuid: uuid,
	}
	if err := h.validate(); err != nil {
		return nil, err
	}
	return h, nil
}

// MustNew returns a guaranteed-to-be-valid Holder or panics
func MustNew(uuid string, name string, bday time.Time, hTyp HolderType) *Holder {
	h, err := New(uuid, name, bday, hTyp)
	if err != nil {
		panic(err)
	}
	return h
}

// Marshalers ...

// UnmarshalFromRepository unmarshals Holder from the repository so that non-constructable
// private fields can still be initialized from (private) repository state
//
// Important: DO NEVER USE THIS METHOD EXCEPT FROM THE REPOSITORY
// Reason: This method initializes private state, so you could corrupt the domain.
func UnmarshalFromRepository(uuid string, name string, bday time.Time, hTyp HolderType) *Holder {
	h := MustNew(uuid, name, bday, hTyp)
	return h
}
