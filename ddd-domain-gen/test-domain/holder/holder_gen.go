// Code generated by ddd-domain-gen, DO NOT EDIT.
package holder

import (
	"errors"
	"time"
)

// Generators ...

// New returns a guaranteed-to-be-valid Holder or an error
func New(uuid *string, name *string, bday *time.Time, hTyp *HolderType) (*Holder, error) {
	if uuid == nil {
		return nil, errors.New("field uuid is missing")
	}
	if name == nil {
		return nil, errors.New("field name is missing")
	}
	if hTyp == nil {
		return nil, errors.New("filed folder type is missing")
	}
	return &Holder{
		bday: bday,
		hTyp: hTyp,
		name: name,
		uuid: uuid,
	}, nil
}

// MustNew returns a guaranteed-to-be-valid Holder or panics
func MustNew(uuid *string, name *string, bday *time.Time, hTyp *HolderType) *Holder {
	h, err := New(uuid, name, bday, hTyp)
	if err != nil {
		panic(err)
	}
	return h
}

// Marshalers ...

// UnmarshalFromRepository unmarshals Holder from the repository so that non-constructable
// private fields can still be initialized from (private) repository state
//
// Important: DO NEVER USE THIS METHOD EXCEPT FROM THE REPOSITORY
// Reason: This method initializes private state, so you could corrupt the domain.
func UnmarshalFromRepository(uuid *string, name *string, bday *time.Time, hTyp *HolderType) *Holder {
	h := MustNew(uuid, name, bday, hTyp)
	return h
}

// Getters ...

// Uuid returns uuid value
func (h *Holder) Uuid() *string {
	return h.uuid
}

// Name returns name value
func (h *Holder) Name() *string {
	return h.name
}

// Bday returns bday value
func (h *Holder) Bday() *time.Time {
	return h.bday
}

// HTyp returns hTyp value
func (h *Holder) HTyp() *HolderType {
	return h.hTyp
}
