// Code generated by 'ddd-gen domain entity', DO NOT EDIT.
package account

import (
	"errors"
	"fmt"
	holder "github.com/xoe-labs/ddd-gen/internal/test-svc/domain/holder"
	"reflect"
)

// Constructors ...

// New returns a guaranteed-to-be-valid Account or an error
func New(uuid string, holder holder.Holder, altHolders []holder.Holder, holderRoles map[holder.Holder]string, address string) (*Account, error) {
	if reflect.ValueOf(uuid).IsZero() {
		return nil, errors.New("field uuid is empty")
	}
	if reflect.ValueOf(holder).IsZero() {
		return nil, errors.New("field holder is empty")
	}
	if reflect.ValueOf(altHolders).IsZero() {
		return nil, errors.New("field alternative holders is empty")
	}
	if reflect.ValueOf(holderRoles).IsZero() {
		return nil, errors.New("field holder role map is empty")
	}
	a := &Account{
		address:     address,
		altHolders:  altHolders,
		holder:      holder,
		holderRoles: holderRoles,
		uuid:        uuid,
	}
	return a, nil
}

// MustNew returns a guaranteed-to-be-valid Account or panics
func MustNew(uuid string, holder holder.Holder, altHolders []holder.Holder, holderRoles map[holder.Holder]string, address string) *Account {
	a, err := New(uuid, holder, altHolders, holderRoles, address)
	if err != nil {
		panic(err)
	}
	return a
}

// Marshalers ...

// UnmarshalFromStore unmarshals Account from the repository so that non-constructable
// private fields can still be initialized from (private) repository state
//
// Important: DO NEVER USE THIS METHOD EXCEPT FROM THE REPOSITORY
// Reason: This method initializes private state, so you could corrupt the domain.
func UnmarshalFromStore(uuid string, holder holder.Holder, altHolders []holder.Holder, holderRoles map[holder.Holder]string, address string, balance int64, values []int64) *Account {
	a := MustNew(uuid, holder, altHolders, holderRoles, address)
	a.balance = balance
	a.values = values
	return a
}

// Accessors ...

// Holder returns holder value
func (a *Account) Holder() holder.Holder {
	return a.holder
}

// SetAltHolders sets altHolders value
func (a *Account) SetAltHolders(altHolders []holder.Holder) {
	a.altHolders = altHolders
}

// Utilities ...

// Equal answers whether v is equivalent to a
// Always returns false if v is not a Account
func (a Account) Equal(v interface{}) bool {
	other, ok := v.(Account)
	if !ok {
		return false
	}
	if a.uuid != other.uuid {
		return false
	}
	return true
}

// String implements the fmt.Stringer interface and returns the native format of Account
func (a Account) String() string {
	return fmt.Sprintf("%s ", a.uuid)
}
