// Code generated by 'ddd-gen app command': DO NOT EDIT.

package command

import (
	"context"
	errwrap "github.com/hashicorp/errwrap"
	error1 "github.com/xoe-labs/ddd-gen/internal/test-svc/app/error"
	repository "github.com/xoe-labs/ddd-gen/internal/test-svc/app/repository"
	account "github.com/xoe-labs/ddd-gen/internal/test-svc/domain/account"
	"reflect"
)

// Topic: Holder

var (
	// ErrValidateHolderNotIdentifiable signals that ValidateHolder's command object was not identifiable
	ErrValidateHolderNotIdentifiable = error1.NewIdentificationError("ErrValidateHolderNotIdentifiable")
	// ErrValidateHolderFailedInRepository signals that ValidateHolder failed in the repository layer
	ErrValidateHolderFailedInRepository = error1.NewRepositoryError("ErrValidateHolderFailedInRepository")
	// ErrValidateHolderFailedInDomain signals that ValidateHolder failed in the domain layer
	ErrValidateHolderFailedInDomain = error1.NewDomainError("ErrValidateHolderFailedInDomain")
)

// ValidateHolderHandler knows how to perform ValidateHolder
type ValidateHolderHandler struct {
	agg repository.Repository
}

// NewValidateHolderHandler returns ValidateHolderHandler
func NewValidateHolderHandler(agg repository.Repository) *ValidateHolderHandler {
	if reflect.ValueOf(agg).IsZero() {
		panic("no 'agg' provided!")
	}
	return &ValidateHolderHandler{agg: agg}
}

// Handle generically performs ValidateHolder
func (h ValidateHolderHandler) Handle(ctx context.Context, vh ValidateHolder) error {
	if reflect.ValueOf(vh.Identifier()).IsZero() {
		return ErrValidateHolderNotIdentifiable
	}
	var innerErr error
	var repoErr error
	repoErr = h.agg.Update(ctx, vh, func(a *account.Account) bool {
		if err := vh.handle(ctx, a); err != nil {
			innerErr = errwrap.Wrap(ErrValidateHolderFailedInDomain, err)
			return false
		}
		return true
	})
	if innerErr != nil {
		return innerErr
	}
	if repoErr != nil {
		return errwrap.Wrap(ErrValidateHolderFailedInRepository, repoErr)
	}
	return nil
}
