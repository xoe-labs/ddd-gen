// Code generated by 'ddd-gen app command': DO NOT EDIT.

package command

import (
	"context"
	errwrap "github.com/hashicorp/errwrap"
	app "github.com/xoe-labs/ddd-gen/internal/test-svc/app"
	errors "github.com/xoe-labs/ddd-gen/internal/test-svc/app/errors"
	domain "github.com/xoe-labs/ddd-gen/internal/test-svc/domain"
	"reflect"
)

// Topic: Account

var (
	// ErrNotAuthorizedToMakeNewAccount signals that the caller is not authorized to perform MakeNewAccount
	ErrNotAuthorizedToMakeNewAccount = errors.NewAuthorizationError("ErrNotAuthorizedToMakeNewAccount")
	// ErrMakeNewAccountHasNoTarget signals that MakeNewAccount's target was not distinguishable
	ErrMakeNewAccountHasNoTarget = errors.NewTargetIdentificationError("ErrMakeNewAccountHasNoTarget")
	// ErrMakeNewAccountLoadingFailed signals that MakeNewAccount storage failed to load the entity
	ErrMakeNewAccountLoadingFailed = errors.NewStorageLoadingError("ErrMakeNewAccountLoadingFailed")
	// ErrMakeNewAccountSavingFailed signals that MakeNewAccount failed to save the entity
	ErrMakeNewAccountSavingFailed = errors.NewStorageSavingError("ErrMakeNewAccountSavingFailed")
	// ErrMakeNewAccountFailedInDomain signals that MakeNewAccount failed in the domain layer
	ErrMakeNewAccountFailedInDomain = errors.NewDomainError("ErrMakeNewAccountFailedInDomain")
)

// MakeNewAccountHandlerWrapper knows how to perform MakeNewAccount
type MakeNewAccountHandlerWrapper struct {
	rw app.RequiresStorageWriterReader
	p  app.RequiresPolicer
}

// NewMakeNewAccountHandlerWrapper returns MakeNewAccountHandlerWrapper
func NewMakeNewAccountHandlerWrapper(rw app.RequiresStorageWriterReader, p app.RequiresPolicer) *MakeNewAccountHandlerWrapper {
	if reflect.ValueOf(rw).IsZero() {
		panic("no 'rw' provided!")
	}
	if reflect.ValueOf(p).IsZero() {
		panic("no 'p' provided!")
	}
	return &MakeNewAccountHandlerWrapper{rw: rw, p: p}
}

// Handle generically performs MakeNewAccount
func (h MakeNewAccountHandlerWrapper) Handle(ctx context.Context, mna domain.MakeNewAccount, actor app.OffersPoliceable, target app.OffersDistinguishable) error {
	// assert that target is distinguishable
	if !target.IsDistinguishable() {
		return ErrMakeNewAccountHasNoTarget
	}
	// load entity from store; handle + wrap error
	a, loadErr := h.rw.Load(ctx, target)
	if loadErr != nil {
		return errwrap.Wrap(ErrMakeNewAccountLoadingFailed, loadErr)
	}
	// assert authorization via policy interface
	if ok := h.p.Can(ctx, actor, "MakeNewAccount", a); !ok {
		// return opaque error: handle potentially sensitive policy errors out-of-band!
		return ErrNotAuthorizedToMakeNewAccount
	}
	// assert correct command handling by the domain
	if ok := mna.Handle(ctx, a); !ok {
		var domErr error
		for i, e := range mna.Errors() {
			if i == 0 {
				domErr = e
			} else {
				domErr = errwrap.Wrap(domErr, e)
			}
		}
		return ErrMakeNewAccountFailedInDomain
	}
	// save domain facts to storage
	saveErr := h.rw.SaveFacts(ctx, target, app.OffersFactKeeper(&mna))
	if saveErr != nil {
		return errwrap.Wrap(ErrMakeNewAccountSavingFailed, saveErr)
	}
	return nil
}

// compile time assertions
var (
	_ app.RequiresCommandHandler = (*domain.MakeNewAccount)(nil)
	_ app.RequiresErrorKeeper    = (*domain.MakeNewAccount)(nil)
	_ app.OffersFactKeeper       = (*domain.MakeNewAccount)(nil)
)
