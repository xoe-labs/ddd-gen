// Code generated by 'ddd-gen app command': DO NOT EDIT.

package command

import (
	"context"
	"encoding/json"
	errwrap "github.com/hashicorp/errwrap"
	balancer "github.com/xoe-labs/ddd-gen/internal/test-svc/app/balancer"
	error1 "github.com/xoe-labs/ddd-gen/internal/test-svc/app/error"
	policy "github.com/xoe-labs/ddd-gen/internal/test-svc/app/policy"
	repository "github.com/xoe-labs/ddd-gen/internal/test-svc/app/repository"
	account "github.com/xoe-labs/ddd-gen/internal/test-svc/domain/account"
	"reflect"
)

// Topic: Balance

var (
	// ErrNotAuthorizedToIncreaseBalanceFromSvc signals that the caller is not authorized to perform IncreaseBalanceFromSvc
	ErrNotAuthorizedToIncreaseBalanceFromSvc = error1.NewAuthorizationError("ErrNotAuthorizedToIncreaseBalanceFromSvc")
	// ErrIncreaseBalanceFromSvcNotIdentifiable signals that IncreaseBalanceFromSvc's command object was not identifiable
	ErrIncreaseBalanceFromSvcNotIdentifiable = error1.NewIdentificationError("ErrIncreaseBalanceFromSvcNotIdentifiable")
	// ErrIncreaseBalanceFromSvcFailedInRepository signals that IncreaseBalanceFromSvc failed in the repository layer
	ErrIncreaseBalanceFromSvcFailedInRepository = error1.NewRepositoryError("ErrIncreaseBalanceFromSvcFailedInRepository")
	// ErrIncreaseBalanceFromSvcFailedInDomain signals that IncreaseBalanceFromSvc failed in the domain layer
	ErrIncreaseBalanceFromSvcFailedInDomain = error1.NewDomainError("ErrIncreaseBalanceFromSvcFailedInDomain")
)

// IncreaseBalanceFromSvcHandler knows how to perform IncreaseBalanceFromSvc
type IncreaseBalanceFromSvcHandler struct {
	svc balancer.Balancer
	pol policy.Policer
	agg repository.Repository
}

// NewIncreaseBalanceFromSvcHandler returns IncreaseBalanceFromSvcHandler
func NewIncreaseBalanceFromSvcHandler(svc balancer.Balancer, pol policy.Policer, agg repository.Repository) *IncreaseBalanceFromSvcHandler {
	if reflect.ValueOf(svc).IsZero() {
		panic("no 'svc' provided!")
	}
	if reflect.ValueOf(pol).IsZero() {
		panic("no 'pol' provided!")
	}
	if reflect.ValueOf(agg).IsZero() {
		panic("no 'agg' provided!")
	}
	return &IncreaseBalanceFromSvcHandler{svc: svc, pol: pol, agg: agg}
}

// Handle generically performs IncreaseBalanceFromSvc
func (h IncreaseBalanceFromSvcHandler) Handle(ctx context.Context, ibfs IncreaseBalanceFromSvc) error {
	if reflect.ValueOf(ibfs.Identifier()).IsZero() {
		return ErrIncreaseBalanceFromSvcNotIdentifiable
	}
	var innerErr error
	var repoErr error
	repoErr = h.agg.Update(ctx, ibfs, func(a *account.Account) bool {
		data, err := json.Marshal(a)
		if err != nil {
			panic(err) // invariant violation: the domain shall always be consistent!
		}
		if ok := h.pol.Can(ctx, ibfs, "IncreaseBalanceFromSvc", data); !ok {
			innerErr = ErrNotAuthorizedToIncreaseBalanceFromSvc
			return false
		}
		if err := ibfs.handle(ctx, a, &h.svc); err != nil {
			innerErr = errwrap.Wrap(ErrIncreaseBalanceFromSvcFailedInDomain, err)
			return false
		}
		return true
	})
	if innerErr != nil {
		return innerErr
	}
	if repoErr != nil {
		return errwrap.Wrap(ErrIncreaseBalanceFromSvcFailedInRepository, repoErr)
	}
	return nil
}
